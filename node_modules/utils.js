var request = require('request'),
    zlib = require('zlib'),
    FeedParser = require('feedparser'),
    cheerio = require('cheerio'),
    USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36',
    ACCEPT = 'text/html,application/xhtml+xml,application/xml,application/rss+xml',
    ACCEPT_ENCODING = 'gzip,deflate',
    ACCEPT_LANGUAGE = 'en-US,en;q=0.8';


// onDone ( response, body ) - called after the url has been fetched
// onErr ( error ) - called when an error occurs
function getUrl(url, onDone, onErr) {
    'use strict';
    var opts = {
        url: url,
        timeout: 10000,
        followAllRedirects: true,
        headers: {
            'User-Agent': USER_AGENT,
            'Accept': ACCEPT,
            'Accept-Encoding': ACCEPT_ENCODING,
            'Accept-Language': ACCEPT_LANGUAGE
        }
    };
    
    var req = request.get(opts);
    req.on('response', function(res) {
        var chunks = [];
        
        res.on('data', function(chunk) {
            chunks.push(chunk);
        });

        res.on('end', function() {
            var buffer = Buffer.concat(chunks);
            var encoding = res.headers['content-encoding'];
            if (encoding == 'gzip') {
                zlib.gunzip(buffer, function(err, decoded) {
                    if (err) onErr(err);
                    else onDone(res, decoded && decoded.toString());
                });
            } else if (encoding == 'deflate') {
                zlib.inflate(buffer, function(err, decoded) {
                    if (err) onErr(err);
                    else onDone(res, decoded && decoded.toString());
                })
            } else {
                onDone(res, buffer.toString());
            }
        });
        
    });

    req.on('error', function(err) {
        onErr(err);
    });
}


// onDone ( response ) - called once we receive a response
// onErr ( error ) - called when an error occurs
function getStream(url, onDone, onErr) {
    'use strict';
    var opts = {
        url: url,
        timeout: 10000,
        followAllRedirects: true,
        headers: {
            'User-Agent': USER_AGENT,
            'Accept': ACCEPT,
            'Accept-Encoding': ACCEPT_ENCODING,
            'Accept-Language': ACCEPT_LANGUAGE
        }
    },
        req = request(opts);
    
    req.on('error', onErr);
    req.on('response', function (res) {
        if (res.statusCode != 200) {
            onErr(new Error('Invalid response code ' + res.statusCode));
        } else {
            var encoding = res.headers['content-encoding']
            if (encoding == 'gzip') {
                onDone(res.pipe(zlib.createGunzip()));
            } else if (encoding == 'deflate') {
                onDone(res.pipe(zlib.createInflate()));
            } else {
                onDone(res);
            }
        }
    });
}


// onDone ( posts, meta ) - called after all posts have been retrieved
// onErr ( error ) - called when an error occurs
function fetchFeed(feed, onDone, onErr) {
    'use strict';
    var feedparser = new FeedParser(),
        posts = [],
        meta;
    
    feedparser.on('error', onErr);
    feedparser.on('end', function () {
        onDone(posts, meta);
    });
    
    feedparser.on('readable', function () {
        var post;
        while (post = this.read()) {
            if (post)
                posts.push(post);
            meta = this.meta;
        }
    });
    
    getStream(feed, function (res) {
        res.pipe(feedparser);
    }, onErr);
}


// onDone ( text ) - called after article has been fully loaded and parsed
// onErr ( error ) - called when an error occurs
function pullArticle(url, append, sel, remove, onDone, onErr) {
    'use strict';
    var fullUrl = url;
    if (append) {
        fullUrl = url + append;
    }
    
    getUrl(fullUrl, function (res, body) {
        var ch = cheerio.load(body),
            txt = [],
            ls = null,
            i = null;
        ch('script').remove();
        ch('meta').remove();
        ch('link').remove();
        ch('form').remove();
        
        // remove specified tags
        if (remove) {
            ls = remove.split('|');
            for (i in ls) {
                ch(ls[i]).remove();
            }
        }
        
        // get content from specified selectors
        ls = sel.split('|');
        for (i in ls) {
            ch(ls[i]).each(function (i, ele) {
                txt.push('<div class="webr-paragraph">' + ch(this).html() + '</div>');
            });
        }
        
        onDone(txt.join(''));
    }, onErr);
}


exports.getUrl = getUrl;
exports.getStream = getStream;
exports.fetchFeed = fetchFeed;
exports.pullArticle = pullArticle;
